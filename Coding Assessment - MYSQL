create database ecommerce;
use ecommerce;

create table customers(
 customer_id INT PRIMARY KEY,
 firstname  VARCHAR(50),
 lastname VARCHAR(50),
 email VARCHAR(100),
 address VARCHAR(200)
 );
 create table products(
 product_id INT PRIMARY KEY ,
 name VARCHAR(100),
 description VARCHAR(200),
 PRICE decimal (10,2),
 stockquantity int
 );
create table cart( 
cart_id INT PRIMARY KEY,
customer_id INT,
product_id INT,
quantity INT,
FOREIGN KEY (customer_id)REFERENCES customers(customer_id),
FOREIGN KEY (product_id)REFERENCES products(product_id)
);
create table orders(
order_id INT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_price DECIMAL(10,2),
shipping_address VARCHAR(200),
FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
create table order_items(
order_item_id INT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
itemamount DECIMAL(10,2),
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (product_id)REFERENCES products(product_id)
);

INSERT INTO products VALUES
(1, 'Laptop', 'High-performance laptop', 800.00, 10),
(2, 'Smartphone', 'Latest smartphone', 600.00, 15),
(3, 'Tablet', 'Portable tablet', 300.00, 20),
(4, 'Headphones', 'Noise-canceling', 150.00, 30),
(5, 'TV', '4K Smart TV', 900.00, 5),
(6, 'Coffee Maker', 'Automatic coffee maker', 50.00, 25),
(7, 'Refrigerator', 'Energy-efficient', 700.00, 10),
(8, 'Microwave Oven', 'Countertop microwave', 80.00, 15),
(9, 'Blender', 'High-speed blender', 70.00, 20),
(10, 'Vacuum Cleaner', 'Bagless vacuum cleaner', 120.00, 10)
;

INSERT INTO customers VALUES 
(1, 'John', 'Doe', 'johndoe@example.com', '123 Main St, City'),
(2, 'Jane', 'Smith', 'janesmith@example.com', '456 Elm St, Town'),
(3, 'Robert', 'Johnson', 'robert@example.com', '789 Oak St, Village'),
(4, 'Sarah', 'Brown', 'sarah@example.com', '101 Pine St, Suburb'),
(5, 'David', 'Lee', 'david@example.com', '234 Cedar St, District'),
(6, 'Laura', 'Hall', 'laura@example.com', '567 Birch St, County'),
(7, 'Michael', 'Davis', 'michael@example.com', '890 Maple St, State'),
(8, 'Emma', 'Wilson', 'emma@example.com', '321 Redwood St, Country'),
(9, 'William', 'Taylor', 'william@example.com', '432 Spruce St, Province'),
(10, 'Olivia', 'Adams', 'olivia@example.com', '765 Fir St, Territory');

INSERT INTO orders VALUES
(1, 1, '2023-01-05', 1200.00, '123 Main St, City'),
(2, 2, '2023-02-10', 900.00, '456 Elm St, Town'),
(3, 3, '2023-03-15', 300.00, '789 Oak St, Village'),
(4, 4, '2023-04-20', 150.00, '101 Pine St, Suburb'),
(5, 5, '2023-05-25', 1800.00, '234 Cedar St, District'),
(6, 6, '2023-06-30', 400.00, '567 Birch St, County'),
(7, 7, '2023-07-05', 700.00, '890 Maple St, State'),
(8, 8, '2023-08-10', 160.00, '321 Redwood St, Country'),
(9, 9, '2023-09-15', 140.00, '432 Spruce St, Province'),
(10, 10, '2023-10-20', 1400.00, '765 Fir St, Territory');

INSERT INTO order_items VALUES
(1, 1, 1, 2, 1600.00),
(2, 1, 3, 1, 300.00),
(3, 2, 2, 3, 1800.00),
(4, 3, 5, 2, 1800.00),
(5, 4, 4, 4, 600.00),
(6, 4, 6, 1, 50.00),
(7, 5, 1, 1, 800.00),
(8, 5, 2, 2, 1200.00),
(9, 6, 10, 2, 240.00),
(10, 6, 9, 3, 210.00);

INSERT INTO cart VALUES
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 3),
(4, 3, 4, 4),
(5, 3, 5, 2),
(6, 4, 6, 1),
(7, 5, 1, 1),
(8, 6, 10, 2),
(9, 6, 9, 3),
(10, 7, 7, 2);

-- 1 update the refrigerator price to 800 --
UPDATE products SET price = 800 
WHERE product_id='7';

-- 2 remove all the carts items for a customer
DELETE FROM cart WHERE customer_id=9; 

-- 3 retrieve products priced below $100
SELECT * FROM products WHERE price<100;

-- 4 find products with stock quantity greater than 5
SELECT * FROM products where stockquantity>5;

-- 5 retreive orders with total amt between 500 and 1000
SELECT * FROM orders WHERE total_price BETWEEN 500 AND 1000;

-- 6 Find products which name end with letter 'r'
SELECT * 
FROM products 
WHERE RIGHT(name, 1) = 'r';

-- 7 Retrieve cart items for customer 5
SELECT * FROM cart WHERE customer_id=5;

-- 8 find the customers who placed orders in 2023
SELECT DISTINCT customer_id
FROM orders
WHERE YEAR(order_date) = 2023;

-- 9 Min stock
SELECT MIN(stockquantity) FROM products;

-- 10 Total amount spent by each customer
SELECT customer_id,SUM(total_price)
AS total_spent
FROM orders
GROUP BY customer_id;

-- 11 avg order amt for each cutomer
SELECT customer_id,AVG(total_price)
FROM orders
GROUP BY customer_id;

-- 12 Count the no of orders place by each customer
 SELECT customer_id , COUNT(*) 
 FROM orders
 GROUP BY customer_id;
 
 -- 13 max order amt for each customer
 SELECT customer_id , MAX(total_price)
 FROM orders
 GROUP BY customer_id;
 
 -- 14 Customers who placed orders total to 1000
 SELECT customer_id , SUM(total_price) AS total_spent
 FROM orders
 GROUP BY customer_id
 HAVING total_spent>1000;

-- 15 Subquery to find products not in cart
SELECT * FROM products
WHERE product_id NOT IN 
(SELECT product_id FROM cart);

-- 16 Subquery to find customers who have not placed order
SELECT * FROM customers
WHERE customer_id NOT IN 
(SELECT customer_id FROM orders);

-- 17 subquery to calculate percentage of total revenue for a product
SELECT p.name,(SELECT SUM(itemamount)FROM order_items
 WHERE product_id = p.product_id)*100/(SELECT SUM(itemAmount)
 FROM order_items) AS revenue_percentage 
 FROM products p;
 
 -- 18 subquery to find products with low stock 
 SELECT * FROM products
 WHERE stockquantity < (SELECT AVG (stockquantity) FROM products);
 
 -- 19 Subquery to find customers who have placed high value orders
  SELECT * FROM customers
 WHERE customer_id IN 
 (SELECT customer_id FROM orders
 WHERE total_price>1000
 );
